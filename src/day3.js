// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Caml_int32              = require("bs-platform/lib/js/caml_int32.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function blocksInSquare(squareNumber) {
  if (squareNumber !== 0) {
    return (2 + ((squareNumber - 1 | 0) << 1) | 0) + Caml_int32.imul(6, squareNumber) | 0;
  } else {
    return 1;
  }
}

function findSquare(block) {
  var _firstBlockInSquare = 1;
  var _currSquareNumber = 0;
  while(true) {
    var currSquareNumber = _currSquareNumber;
    var firstBlockInSquare = _firstBlockInSquare;
    var lastBlockInSquare = firstBlockInSquare + blocksInSquare(currSquareNumber) | 0;
    var match = +(lastBlockInSquare > block);
    if (match !== 0) {
      return /* record */[
              /* squareNumber */currSquareNumber,
              /* initialBlock */firstBlockInSquare
            ];
    } else {
      _currSquareNumber = currSquareNumber + 1 | 0;
      _firstBlockInSquare = lastBlockInSquare;
      continue ;
      
    }
  };
}

function findMoveDirection(block) {
  var match = findSquare(block);
  var squareNumber = match[/* squareNumber */0];
  var i = block - match[/* initialBlock */1] | 0;
  if (i !== 0) {
    if (i <= (1 + ((squareNumber - 1 | 0) << 1) | 0)) {
      return /* Up */1;
    } else if (i <= ((1 + ((squareNumber - 1 | 0) << 1) | 0) + (squareNumber << 1) | 0)) {
      return /* Left */2;
    } else if (i <= ((1 + ((squareNumber - 1 | 0) << 1) | 0) + (squareNumber << 2) | 0)) {
      return /* Down */3;
    } else if (i <= ((1 + ((squareNumber - 1 | 0) << 1) | 0) + Caml_int32.imul(6, squareNumber) | 0)) {
      return /* Right */0;
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "day3.re",
              36,
              9
            ]
          ];
    }
  } else {
    return /* Right */0;
  }
}

function range(min, max) {
  var _x = min;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var x = _x;
    if (x === max) {
      return List.rev(acc);
    } else {
      _acc = /* :: */[
        x,
        acc
      ];
      _x = x + 1 | 0;
      continue ;
      
    }
  };
}

function findCoords(block) {
  if (block === 1) {
    return /* tuple */[
            0,
            0
          ];
  } else {
    var match = findSquare(block);
    var squareNumber = match[/* squareNumber */0];
    var initialPoint_001 = squareNumber - 1 | 0;
    var initialPoint = /* tuple */[
      squareNumber,
      initialPoint_001
    ];
    return List.fold_left((function (param, block) {
                  var y = param[1];
                  var x = param[0];
                  var match = findMoveDirection(block + 1 | 0);
                  switch (match) {
                    case 0 : 
                        return /* tuple */[
                                x + 1 | 0,
                                y
                              ];
                    case 1 : 
                        return /* tuple */[
                                x,
                                y - 1 | 0
                              ];
                    case 2 : 
                        return /* tuple */[
                                x - 1 | 0,
                                y
                              ];
                    case 3 : 
                        return /* tuple */[
                                x,
                                y + 1 | 0
                              ];
                    
                  }
                }), initialPoint, range(match[/* initialBlock */1], block));
  }
}

function abs(x) {
  var match = +(x < 0);
  if (match !== 0) {
    return Caml_int32.imul(x, -1);
  } else {
    return x;
  }
}

function absSum(param) {
  return abs(param[0]) + abs(param[1]) | 0;
}

function solution(input) {
  return absSum(findCoords(input));
}

exports.blocksInSquare    = blocksInSquare;
exports.findSquare        = findSquare;
exports.findMoveDirection = findMoveDirection;
exports.range             = range;
exports.findCoords        = findCoords;
exports.abs               = abs;
exports.absSum            = absSum;
exports.solution          = solution;
/* No side effect */
